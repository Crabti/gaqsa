version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  jira: circleci/jira@1.3.1
  node: circleci/node@4.7.0
  ms-teams-notifier: oktapodia/ms-teams-notifier@3.0.0

workflows:
  gaqsa-pipeline:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - backend-build-and-test:
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: development
      - frontend-build-and-test:
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: development
      - deploy-staging:
          requires:
            - frontend-build-and-test
            - backend-build-and-test
          filters:
            branches:
              only:
                - main
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: staging
                job_type: deployment
      - wait-for-approval:
          type: approval
          requires:
            - frontend-build-and-test
            - backend-build-and-test
            - deploy_staging
      - deploy-production:
          requires:
            - wait-for-approval
            - frontend-build-and-test
            - backend-build-and-test
          filters:
            branches:
              only:
                - main
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: production
                job_type: deployment
jobs:
  backend-build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8.1
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
          app-dir: ./backend
      - run:
          name: Lint
          working_directory: ./backend
          command: |
            poetry run flake8 --exclude=*.pyc,venv/
      - run:
          name: Run tests
          working_directory: ./backend
          command: |
            poetry run python manage.py test
  frontend-build-and-test:
    docker:
    - image: node:16
    steps:
      - checkout
      - node/install-yarn
      - node/install-packages:
          app-dir: ./frontend
          pkg-manager: yarn
      - run:
          name: Lint
          working_directory: ./frontend
          command: yarn lint
      - run:
          name: Typecheck
          working_directory: ./frontend
          command: yarn typecheck
      - run:
          name: test
          working_directory: ./frontend
          command: yarn test
      - run:
          name: build
          working_directory: ./frontend
          command: yarn build
      - persist_to_workspace:
          root: frontend
          paths:
            - build
  deploy-staging:
    docker:
      - image: cibuilds/hugo:0.42.1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/frontend/build
      - run:
          name: Deploy to staging
          command: |
            ssh-keyscan -H gaqsa.com >> ~/.ssh/known_hosts
            ./scripts/deployment/staging/deploy_staging.sh gaqsacom@gaqsa.com backend /tmp/frontend/build/build
      - run:
          name: Run curl smoke tests
          command: |
            ./scripts/deployment/staging/smoke_test.sh https://api.staging.gaqsa.com/
            ./scripts/deployment/staging/smoke_test.sh https://staging.gaqsa.com/
  deploy-production:
    docker:
      - image: cibuilds/hugo:0.42.1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/frontend/build
      - run:
          name: Deploy to production
          command: |
            ssh-keyscan -H gaqsa.com >> ~/.ssh/known_hosts
            ./scripts/deployment/production/deploy_production.sh gaqsacom@gaqsa.com backend /tmp/frontend/build/build
      - run:
          name: Run curl smoke tests
          command: |
            ./scripts/deployment/production/smoke_test.sh https://api.gaqsa.com/
            ./scripts/deployment/production/smoke_test.sh https://prod.gaqsa.com/