version: 2.1

orbs:
  python: circleci/python@1.2
  jira: circleci/jira@1.3.1
  node: circleci/node@4.7.0
  ms-teams-notifier: oktapodia/ms-teams-notifier@3.0.0

workflows:
  gaqsa-pipeline:
    jobs:
      - backend-lint-and-test:
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
      - frontend-lint-and-test:
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
      - frontend-build-staging:
          requires:
            - frontend-lint-and-test
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: staging
      - frontend-build-production:
          requires:
            - frontend-lint-and-test
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: production
      - deploy-staging:
          requires:
            - frontend-build-production
            - frontend-build-staging
          filters:
            branches:
              only:
                - main
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: staging
                job_type: deployment
      - wait-for-approval:
          type: approval
          requires:
            - deploy-staging
      - deploy-production:
          requires:
            - wait-for-approval
          filters:
            branches:
              only:
                - main
          post-steps:
            - ms-teams-notifier/report:
                only_on_fail: true
                webhook_url: $MS_TEAMS_WEBHOOK_URL
            - jira/notify:
                environment_type: production
                job_type: deployment
jobs:
  backend-lint-and-test:
    docker:
      - image: cimg/python:3.8.1
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
          app-dir: ./backend
      - run:
          name: Lint
          working_directory: ./backend
          command: |
            poetry run flake8 --exclude="*.pyc,venv/,*/migrations/*"
      - run:
          name: Create test artifact folders
          command: |
            mkdir /tmp/artifacts
            mkdir /tmp/test-results
      - run:
          name: Run tests
          working_directory: ./backend
          command: |
            poetry run coverage run manage.py test
      - run:
          name: Check test coverage above required
          working_directory: ./backend
          command: |
            poetry run coverage report --fail-under=80
      - run:
          name: Upload test coverage
          working_directory: ./backend
          command: |
            poetry run coverage html -d /tmp/artifacts
            mv nosetests.xml /tmp/test-results/nosetests.xml
          when: always
      - store_artifacts:
          path: /tmp/artifacts
      - store_test_results:
          path: /tmp/test-results
  frontend-lint-and-test:
    docker:
    - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          install-yarn: true
          install-npm: false
      - node/install-packages:
          app-dir: ./frontend
          pkg-manager: yarn
          cache-version: v2
      - run:
          name: Lint
          working_directory: ./frontend
          command: yarn lint
      - run:
          name: Typecheck
          working_directory: ./frontend
          command: yarn typecheck
      - run:
          name: Test
          working_directory: ./frontend
          command: yarn test
  frontend-build-staging:
    docker:
    - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          install-yarn: true
          install-npm: false
      - node/install-packages:
          app-dir: ./frontend
          pkg-manager: yarn
          cache-version: v2
      - run:
          name: build staging
          working_directory: ./frontend
          command: yarn build-staging
      - persist_to_workspace:
          root: frontend
          paths:
            - staging_build
  frontend-build-production:
    docker:
    - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          install-yarn: true
          install-npm: false
      - node/install-packages:
          app-dir: ./frontend
          pkg-manager: yarn
          cache-version: v2
      - run:
          name: build production
          working_directory: ./frontend
          command: yarn build-production
      - persist_to_workspace:
          root: frontend
          paths:
            - production_build
  deploy-staging:
    docker:
      - image: cibuilds/hugo:0.42.1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/frontend
      - run:
          name: Deploy to staging
          command: |
            ssh-keyscan -H gaqsa.com >> ~/.ssh/known_hosts
            ./scripts/deployment/staging/deploy_staging.sh gaqsacom@gaqsa.com backend /tmp/frontend/staging_build
      - run:
          name: Create event on datadog
          command: >
            curl -X POST "https://api.datadoghq.com/api/v1/events"
            -H "Content-Type: application/json"
            -H "DD-API-KEY: $DATADOG_KEY"
            -d "{ \"text\": \"Deployment was created with commit hash $CIRCLE_SHA1 \", \"title\": \"Deployment $CIRCLE_SHA1\" , \"tags\": [\"staging\"] }"
      - run:
          name: Run curl smoke tests
          command: |
            ./scripts/deployment/staging/smoke_test.sh https://api.staging.gaqsa.com/
            ./scripts/deployment/staging/smoke_test.sh https://staging.gaqsa.com/
  deploy-production:
    docker:
      - image: cibuilds/hugo:0.42.1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/frontend
      - run:
          name: Deploy to production
          command: |
            ssh-keyscan -H gaqsa.com >> ~/.ssh/known_hosts
            ./scripts/deployment/production/deploy_production.sh gaqsacom@gaqsa.com backend /tmp/frontend/production_build
      - run:
          name: Create event on datadog
          command: >
            curl -X POST "https://api.datadoghq.com/api/v1/events"
            -H "Content-Type: application/json"
            -H "DD-API-KEY: $DATADOG_KEY"
            -d "{ \"text\": \"Deployment was created with commit hash $CIRCLE_SHA1 \", \"title\": \"Deployment $CIRCLE_SHA1\" , \"tags\": [\"production\"] }"
      - run:
          name: Run curl smoke tests
          command: |
            ./scripts/deployment/production/smoke_test.sh https://api.gaqsa.com/
            ./scripts/deployment/production/smoke_test.sh https://prod.gaqsa.com/
